<?XML version="1.0"?>
    <package>
    <comment>

        Author: Hari Sekhon
        Date: 2007-12-17 13:14:06 +0000 (Mon, 17 Dec 2007)

        https://github.com/HariSekhon/Nagios-Plugins

        License: see accompanying LICENSE file

    </comment>
    <job id="Check">
        <resource id="About">
Nagios Plugin - Check Automatic Services for Windows 

version 0.9
        </resource>
        <runtime>
            <description>
Nagios Plugin - Check Automatic Services for Windows

Checks that all automatic Windows services are running

            </description>

            <named name="server"
                   helpstring="The server to check (default=localhost)"
                   type="string" />

            <named name="shortname"
                   helpstring="Display the short name of non-running services instead of the full display name" />

            <named name="exclude"
                   helpstring="Services to exclude from check, comma separated"
                   type="string" />

            <named name="timeout"
                   helpstring="Seconds after which this plugin will self-terminate (default=10)"
                   type="string" />

            <named name="verbose"
                   helpstring="Verbose mode. Use 2-3 times for increased debugging output"  />

            <named name="version"
                   helpstring="Print Version" />

            <named name="help"
                   helpstring="Print Usage" />

            <example>
Shortcuts: /server    --> /s
           /shortname --> /sh
           /exclude   --> /e
           /timeout   --> /t
           /help      --> /h
           /verbose   --> /v
           /version   --> /ver

Note - This program also supports the above as *NIX style -a/--arguments
       for those of us who are unix lovers. All args are also case insensitive

Example:  cscript //NOLOGO check_all_services.wsf /exclude:"DHCP Client"

NSClient++ NSC.ini Example Definition:
command[check_all_services]=cmd /c cscript //NOLOGO "c:\Program Files\NSClient++\windows-plugins\check_all_services.wsf" /exclude:"DHCP Client"
            </example>
        </runtime>
        <script language="VBScript">
            <![CDATA[

            Option Explicit

            '============================================='
            '  V A R I A B L E S   &   C O N S T A N T S  '
            '============================================='

            Const wbemFlagReturnImmediately = &h10
            Const wbemFlagForwardOnly = &h20

            Dim arrAllArgs
            Dim boolServerSet
            Dim boolShortName
            Dim boolTimeoutSet
            Dim colItems
            Dim dictExcludedServices
            Dim intIndex
            Dim intMinimumServices 
            Dim intNonRunningServices
            Dim intServicesChecked
            Dim intTimeout
            Dim intVerbosity
            Dim objExit
            Dim objItem
            Dim objShell
            Dim objWMIService
            Dim regOptionMangling
            Dim regServerName
            Dim strAllArgs
            Dim strArg
            Dim strErrorMsg
            Dim strExcludedService
            Dim strExcludedServices
            Dim strKey
            Dim strMessage
            Dim strNonRunningServices
            Dim strScriptName
            Dim strServer
            Dim strWshHost

            boolServerSet         = False
            boolShortName         = False
            boolTimeoutSet        = False
            intIndex              = 0
            ' This is an additional tripwire, if there are less than intMinimum 
            ' services then there is likely a problem with service enumeration.
            intMinimumServices    = 10
            intNonRunningServices = 0
            intServicesChecked    = 0
            intTimeout            = 10
            intVerbosity          = 0
            strAllArgs            = ""
            strErrorMsg           = "Unknown error within program"
            strExcludedService    = ""
            strExcludedServices   = ""
            strKey                = ""
            strMessage            = ""
            strNonRunningServices = ""
            strServer             = "."
            strWshHost            = ""

            '============================================='
            '          N A G I O S   S T A T E S          '
            '============================================='

            ' Standard Nagios Exit Codes
            Const intOK       = 0
            Const intWARNING  = 1
            Const intCRITICAL = 2
            Const intUNKNOWN  = 3

            ' In function form with standardized output
            Sub OK(strMessage)
                WScript.Echo "SERVICES OK: " & strMessage
                objExit.intErrorLevel = intOK
                WScript.Quit intOK
            End Sub

            Sub WARNING(strMessage)
                WScript.Echo "SERVICES WARNING: " & strMessage
                objExit.intErrorLevel = intWARNING
                WScript.Quit intWARNING
            End Sub

            Sub CRITICAL(strMessage)
                WScript.Echo "SERVICES CRITICAL: " & strMessage
                objExit.intErrorLevel = intCRITICAL
                WScript.Quit intCRITICAL
            End Sub

            Sub UNKNOWN(strMessage)
                WScript.Echo "SERVICES UNKNOWN: " & strMessage
                objExit.intErrorLevel = intUNKNOWN
                WScript.Quit intUNKNOWN
            End Sub

            '============================================='
            '         T I M E O U T   H A N D L E R       '
            '============================================='

            ' Clever Hack
            Class cExit
                Public intErrorLevel

                Private Sub Class_Initialize()
                  intErrorLevel = intUNKNOWN
                End Sub

                Private Sub Class_Terminate()
                    WScript.Quit intErrorLevel
                End Sub
            End Class

            Set objExit = New cExit

            ' Now Set Timeout Value and Message
            WScript.Timeout = intTimeout

            '============================================='
            '       S C R I P T H O S T   C H E C K       '
            '============================================='

            strWshHost = Ucase(Mid(WScript.FullName, InStrRev(WScript.FullName, "\")+1))

            ' You wouldn't want this to execute with WScript and hang now would you?
            If strWshHost <> "CSCRIPT.EXE" Then
                ' If WScript, print a 2 second pop up error which will not hang, otherwise be silent for safety
                If strWshHost = "WSCRIPT.EXE" Then
                    Set objShell = CreateObject("WScript.Shell")
                    strScriptName = Left(WScript.ScriptName, InStrRev(WScript.ScriptName, ".")-1)
                    objShell.PopUp "Nagios plugin not called with CScript - please re-run from the command line like so:" _
                                   & vbCrLf & vbCrLf & "CSCRIPT //NOLOGO " & WScript.ScriptName & " [options]" _
                                   & vbCrLf & vbCrLf & "or see /help for details" & vbCrLf & vbCrLf & "CSCRIPT " & WScript.ScriptName & " /HELP" & vbCrLf & vbCrLf, _
                                   5, "Nagios Plugin - " & strScriptName, vbExclamation
                End If
                ' Exit silently for safety
                WScript.Quit intUNKNOWN
            End If

            '============================================='
            '       A R G U M E N T   H A N D L I N G     '
            '============================================='

            ' Unfortunately the standard named arg retrieval
            ' method is not good enough so I've written my 
            ' own which catches unrecognized args and this 
            ' affords us unix style --args as well.

            Sub ArgumentError(strErrorMsg)
                If strErrorMsg <> "" Then
                    WScript.Echo "Argument Error: " & strErrorMsg
                End If
                WScript.Arguments.ShowUsage
                WScript.Quit intUnknown
            End Sub

            For Each strArg In WScript.Arguments
                strAllArgs = strAllArgs & " " & strArg
            Next

            strAllArgs = Lcase(strAllArgs)

            Set regOptionMangling = New RegExp
            regOptionMangling.Global     = True
            regOptionMangling.IgnoreCase = True
            regOptionMangling.Pattern    = " --"
            strAllArgs = regOptionMangling.Replace(strAllArgs, " /")
            regOptionMangling.Pattern    = " -"
            strAllArgs = regOptionMangling.Replace(strAllArgs, " /")

            strAllArgs = Replace(strAllArgs, "=", " " )
            strAllArgs = Replace(strAllArgs, ":", " " )

            arrAllArgs = Split(strAllArgs)
            For intIndex=0 To Ubound(arrAllArgs)
                strArg  = arrAllArgs(intIndex)
                If strArg <> "" And strArg <> " " Then
                    Select Case strArg
                        Case "/h", "/help"
                            ArgumentError ""
                        Case "/ve", "/ver", "/version"
                            WScript.Echo getResource("About")
                            WScript.Quit intUNKNOWN
                        Case "/v", "/verbose"
                            intVerbosity = intVerbosity + 1
                        Case "/vv"
                            intVerbosity = intVerbosity + 2
                        Case "/vvv"
                            intVerbosity = intVerbosity + 3
                        Case "/s", "/server"
                            If boolServerSet Then
                                ArgumentError "Server switch cannot be used twice"
                            End If
                            boolServerSet = True
                            If Ubound(arrAllArgs) >= intIndex + 1 Then
                                strServer = arrAllArgs(intIndex+1)
                                intIndex = intIndex + 1
                            Else
                                ArgumentError "No argument passed to server switch"
                            End If
                        Case "/e", "/exclude"
                            Do Until intIndex + 1 > Ubound(arrAllArgs)
                                If Left(arrAllArgs(intIndex+1), 1) = "/" Then
                                    Exit Do
                                End If
                                strExcludedServices = strExcludedServices & " " &  Lcase(arrAllArgs(intIndex+1))
                                intIndex = intIndex + 1
                            Loop
                            If strExcludedServices = "" Then
                                ArgumentError "Exclude switch must be followed by a service name"
                            End If
                            On Error Resume Next
                            Int(strExcludedServices)
                            If Err.Number = 0 Then
                                ArgumentError "Excluded service may not be a number, must be a service name"
                            End If
                            On Error Goto 0
                        Case "/sh", "/shortname"
                            boolShortName = True
                        Case "/t", "/timeout"
                            If boolTimeoutSet Then
                                ArgumentError "Timeout switch cannot be used twice"
                            End If
                            boolTimeoutSet = True
                            If Ubound(arrAllArgs) >= intIndex + 1 Then
                                intTimeout = arrAllArgs(intIndex+1)
                                intIndex = intIndex + 1
                                Err.Clear
                                On Error Resume Next
                                intTimeout = Int(intTimeout)
                                If Err.Number Then
                                    ArgumentError "Timeout must be specified as an integer"
                                End If
                                On Error Goto 0
                            Else
                                ArgumentError "No number passed to timeout switch"
                            End If
                        Case Else
                            ArgumentError "Unrecognized Option - " & arrAllArgs(intIndex) & vbCrLf
                    End Select
                End If
            Next


            If strServer = "" Then
                WScript.Echo "Argument Error: No Server Supplied"
                WScript.Arguments.ShowUsage
                WScript.Quit intUnknown
            Else
                Set regServerName = New RegExp
                ' This could be stronger but it doesn't really matter, it is caught
                ' correctly later on when WMI connection is attempted, and you don't
                ' want this regex to make you blind...
                regServerName.Pattern = "(^\.$)|(^[A-Za-z0-9]+$)|(^[A-Za-z0-9]+[\w\.-]*[A-Za-z0-9]+$)"
                regServerName.IgnoreCase = True
                If Not regServerName.Test(strServer) Then
                    WScript.Echo "Argument Error: Server Name given is invalid"
                    WScript.Arguments.ShowUsage
                    WScript.Quit intUNKNOWN
                End If
            End If

            WScript.Timeout = intTimeout

            If intVerbosity >= 2 Then
                If strServer = "." Then
                    WScript.Echo "Server:       " & "local"
                Else
                    WScript.Echo "Server:       " & strServer
                End If
                WScript.Echo "Timeout:      " & intTimeout & " seconds"
                WScript.Echo "Short Names:  " & boolShortName
            End If


            '============================================='
            '              T H E   T E S T                '
            '============================================='

            Err.Clear
            On Error Resume Next
            Set objWMIService = GetObject("winmgmts:\\" & strServer & "\root\CIMV2")
            If Err.Number Then
                If strServer = "." Then
                    strServer = "localhost"
                End If
                strErrorMsg = "Error connecting to WMI service on """ & strServer & """"
                If Err.Description <> "" Then
                    strErrorMsg = strErrorMsg & " - " & Err.Description
                End If
                UNKNOWN strErrorMsg
            End If
            Set colItems = objWMIService.ExecQuery( _
                "SELECT Name,DisplayName,StartMode,State FROM Win32_Service WHERE StartMode = 'Auto'", "WQL", _
                                                            wbemFlagReturnImmediately + wbemFlagForwardOnly)
            If Err.Number Then
                strErrorMsg = "Error retrieving services from WMI"
                If Err.Description <> "" Then
                    strErrorMsg = strErrorMsg & " - " & Err.Description
                End If
                UNKNOWN strErrorMsg
            End If
            On Error Goto 0

            Set dictExcludedServices = CreateObject("Scripting.Dictionary")
            For Each strExcludedService In Split(strExcludedServices, ",")
                dictExcludedServices.Add Lcase(Trim(strExcludedService)), ""
            Next
            If intVerbosity >= 2 Then
                For Each strKey In dictExcludedServices.Keys
                    WScript.Echo "Excluded Service: " & strKey
                Next
                WScript.Echo vbCrLf
            End If

            Err.Clear
            On Error Resume Next
            For Each objItem In colItems
                If intVerbosity >= 3 Then
                  WScript.Echo "DisplayName: " & objItem.DisplayName
                  WScript.Echo "Name: " & objItem.Name
                  WScript.Echo "StartMode: " & objItem.StartMode
                  WScript.Echo "State: " & objItem.State
                  WScript.Echo 
                End If

                If Not dictExcludedServices.Exists(Lcase(objItem.Name)) And _
                   Not dictExcludedServices.Exists(Lcase(objItem.DisplayName)) Then
                    If objItem.State <> "Running" Then
                        intNonRunningServices = intNonRunningServices + 1
                        If boolShortName = True Then
                            strNonRunningServices = strNonRunningServices & objItem.Name & ", "
                        Else
                            strNonRunningServices = strNonRunningServices & objItem.DisplayName & ", "
                        End If
                    End If
                    intServicesChecked = intServicesChecked + 1
                End If
            Next
            If Err.Number Then
                UNKNOWN "Error parsing WMI results - " & Err.Description
            End If
            On Error Goto 0

            If Len(strNonRunningServices) > 1 Then
                strNonRunningServices = Left(strNonRunningServices, InStrRev(strNonRunningServices, ", ")-1)
            End If

            ' intServicesChecked should have been set In the variable declaration section to some reasonable number
            ' of services that we expect to have running, not too high and not too low.
            If intServicesChecked < intMinimumServices Then
                WARNING "Too few services returned, possible problem with service enumeration"
            End If

            If intNonRunningServices = 0 Then
                OK intServicesChecked & " Automatic Services Running"
            ElseIf intNonRunningServices = 1 Then
                CRITICAL intNonRunningServices & " Automatic Service not running - " & strNonRunningServices
            Else
                CRITICAL intNonRunningServices & " Automatic Services not running - " & strNonRunningServices
            End If

            ]]>
        </script>
    </job>
</package>
